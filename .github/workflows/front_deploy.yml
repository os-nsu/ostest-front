name: deploy-front

on:
  push:
    branches: 
    - 13269
    
jobs:
  connect_to_server:
    name: run pull
    runs-on: ubuntu-latest

    steps:
    - name: Setup SSH directory
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts

    - name: Install ssh keys
      run: |
        echo "${{ secrets.FRONT_SSH_PRIVATE_KEY }}" > ~/.ssh/front_rsa
        chmod 600 ~/.ssh/front_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} | tee -a ~/.ssh/known_hosts ~/.ssh/known_hosts2
    
    - name: Debug SSH keys
      run: |
        ls -la ~/.ssh
        echo "known hosts:--------"
        cat ~/.ssh/known_hosts
        echo "front rsa:--------"
        cat ~/.ssh/front_rsa
    
    - name: Connect and pull
      run: |
        ssh -vvv -tt -p ${{ secrets.SSH_PORT }} -i ~/.ssh/front_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
        echo "Connected to server"

    #       cd ${{ secrets.FRONT_WORK_DIR }} 
    #       git checkout checkactions13269
    #       git pull

    #       if [ ! -f env.front_vm ]; then
    #         git clone git@github.com:os-nsu/ostest-plan.git
    #         mv ostest-plan/env.front_vm .
    #         rm -rf ostest-plan
    #       fi

    #       exit
    #     EOF
      
    # - name: Cleanup
    #   run: rm -rf ~/.ssh
    
  # build:
  #   runs-on: ubuntu-latest
  #   needs: connect_to_server

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Deploy to our remote server
  #       run: |
  #         ssh -i ~/.ssh/front_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
  #           cd ${{ secrets.FRONT_WORK_DIR }}
  #           git pull 
            
  #           docker-compose down
  #           docker compose --env-file env.front_vm up --build
          
  #         EOF | tee deployment_log.txt

  #     - name: See logs
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: deployment_log.txt
